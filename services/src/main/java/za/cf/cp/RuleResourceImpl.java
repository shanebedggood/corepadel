package za.cf.cp;

import io.quarkus.panache.common.Sort;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import java.util.List;
import java.util.UUID;

/**
 * Implementation class for custom rule operations.
 * This class provides additional functionality beyond the basic CRUD operations
 * that are automatically generated by PanacheEntityResource.
 */
@Path("/api/rules")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class RuleResourceImpl {
    
    /**
     * Get all rules sorted by order number.
     * @return List of all rules
     */
    @GET
    public List<Rule> getAllRules() {
        return Rule.listAll(Sort.by("orderNumber"));
    }
    
    /**
     * Get a rule by its ID.
     * @param id The rule ID
     * @return The rule if found, 404 if not found
     */
    @GET
    @Path("/{id}")
    public Response getRuleById(@PathParam("id") UUID id) {
        Rule rule = Rule.findById(id);
        if (rule == null) {
            return Response.status(Response.Status.NOT_FOUND)
                    .entity("Rule not found with id: " + id)
                    .build();
        }
        return Response.ok(rule).build();
    }
    
    /**
     * Create a new rule.
     * @param rule The rule to create
     * @return The created rule with generated ID
     */
    @POST
    @Transactional
    public Response createRule(Rule rule) {
        if (rule.title == null || rule.title.trim().isEmpty()) {
            return Response.status(Response.Status.BAD_REQUEST)
                    .entity("Rule title is required")
                    .build();
        }
        
        if (rule.ruleDescription == null || rule.ruleDescription.isEmpty()) {
            return Response.status(Response.Status.BAD_REQUEST)
                    .entity("Rule description is required")
                    .build();
        }
        
        // Check if rule with same title already exists
        Rule existingRule = Rule.find("title", rule.title).firstResult();
        if (existingRule != null) {
            return Response.status(Response.Status.CONFLICT)
                    .entity("Rule with title '" + rule.title + "' already exists")
                    .build();
        }
        
        rule.persist();
        return Response.status(Response.Status.CREATED)
                .entity(rule)
                .build();
    }
    
    /**
     * Update an existing rule.
     * @param id The rule ID
     * @param rule The updated rule data
     * @return The updated rule
     */
    @PUT
    @Path("/{id}")
    @Transactional
    public Response updateRule(@PathParam("id") UUID id, Rule rule) {
        Rule existingRule = Rule.findById(id);
        if (existingRule == null) {
            return Response.status(Response.Status.NOT_FOUND)
                    .entity("Rule not found with id: " + id)
                    .build();
        }
        
        // Update fields if provided
        if (rule.title != null && !rule.title.trim().isEmpty()) {
            // Check if new title conflicts with existing rule
            Rule conflictingRule = Rule.find("title = ?1 and ruleId != ?2", rule.title, id).firstResult();
            if (conflictingRule != null) {
                return Response.status(Response.Status.CONFLICT)
                        .entity("Rule with title '" + rule.title + "' already exists")
                        .build();
            }
            existingRule.title = rule.title;
        }
        
        if (rule.orderNumber != null) {
            existingRule.orderNumber = rule.orderNumber;
        }
        
        if (rule.ruleDescription != null && !rule.ruleDescription.isEmpty()) {
            existingRule.ruleDescription = rule.ruleDescription;
        }
        
        return Response.ok(existingRule).build();
    }
    
    /**
     * Delete a rule.
     * @param id The rule ID
     * @return 204 No Content on success, 404 if not found
     */
    @DELETE
    @Path("/{id}")
    @Transactional
    public Response deleteRule(@PathParam("id") UUID id) {
        Rule rule = Rule.findById(id);
        if (rule == null) {
            return Response.status(Response.Status.NOT_FOUND)
                    .entity("Rule not found with id: " + id)
                    .build();
        }
        
        rule.delete();
        return Response.noContent().build();
    }
    
    /**
     * Get rules by title (search functionality).
     * @param title The title to search for
     * @return List of rules matching the title
     */
    @GET
    @Path("/search")
    public List<Rule> searchRulesByTitle(@QueryParam("title") String title) {
        if (title == null || title.trim().isEmpty()) {
            return getAllRules();
        }
        
        return Rule.find("title ILIKE ?1", "%" + title + "%")
                .list();
    }
} 