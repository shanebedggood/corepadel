name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: corepadelapp
  REGION: us-central1
  SERVICE_NAME: corepadel-quarkus

jobs:
  # Build and deploy Angular frontend to Firebase Hosting
  deploy-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/web-app/package-lock.json

      - name: Install dependencies
        run: |
          cd web/web-app
          npm cache clean --force
          npm install --legacy-peer-deps

      - name: Build Angular app
        run: |
          cd web/web-app
          npm run build:prod

      - name: Authenticate to Google Cloud (ADC for Hosting rewrites)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          export_environment_variables: true

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          channelId: live
          projectId: ${{ env.PROJECT_ID }}

  # Build and deploy Quarkus backend to Cloud Run
  deploy-backend:
    runs-on: ubuntu-latest
    needs: deploy-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Maven
        uses: stCarolas/setup-maven@v4
        with:
          maven-version: '3.9.6'

      - name: Build Quarkus application
        run: |
          cd services
          ./mvnw clean package -DskipTests

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for GCP
        run: gcloud auth configure-docker

      - name: Create Artifact Registry repository (if it doesn't exist)
        run: |
          gcloud artifacts repositories create corepadel-quarkus \
            --repository-format=docker \
            --location=us-central1 \
            --description="Core Padel Quarkus Backend" \
            || echo "Repository already exists"

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Build and push Docker image
        run: |
          cd services
          docker build -f src/main/docker/Dockerfile.jvm -t us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/corepadel-quarkus/${{ env.SERVICE_NAME }}:${{ github.sha }} .
          docker push us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/corepadel-quarkus/${{ env.SERVICE_NAME }}:${{ github.sha }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/corepadel-quarkus/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --set-env-vars="QUARKUS_DATASOURCE_JDBC_URL=${{ secrets.QUARKUS_DATASOURCE_JDBC_URL }},QUARKUS_DATASOURCE_USERNAME=${{ secrets.QUARKUS_DATASOURCE_USERNAME }},QUARKUS_DATASOURCE_PASSWORD=${{ secrets.QUARKUS_DATASOURCE_PASSWORD }},FIREBASE_PROJECT_ID=${{ env.PROJECT_ID }},FIREBASE_REGION=${{ env.REGION }}" \
            --port 8080 \
            --memory 1Gi \
            --cpu 1 \
            --max-instances 10

  # Deploy Firebase services (Auth, Storage)
  deploy-firebase-services:
    runs-on: ubuntu-latest
    needs: deploy-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy Firebase services
        run: |
          firebase deploy --only auth,storage --project ${{ env.PROJECT_ID }} --token ${{ secrets.FIREBASE_TOKEN }}

  # Database migration (optional - run manually)
  migrate-database:
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Run database migrations
        run: |
          # Wait for Cloud Run service to be ready
          sleep 30
          
          # Get the Cloud Run service URL
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.url)")
          
          # Run migrations (you'll need to implement this endpoint in your Quarkus app)
          curl -X POST "$SERVICE_URL/api/migrate" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.MIGRATION_TOKEN }}"

  # Update frontend with backend URL
  update-frontend-config:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-firebase-services]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Get Cloud Run service URL
        id: get-url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.url)")
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT

      - name: Update environment configuration
        run: |
          # Update the Angular environment files with the new backend URL
          cd web/web-app/src/environments
          
          # Update production environment
          sed -i 's|"backendUrl": ".*"|"backendUrl": "${{ steps.get-url.outputs.service_url }}"|g' environment.prod.ts
          
          # Commit and push the changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Update backend URL to ${{ steps.get-url.outputs.service_url }}" || exit 0
          git push
